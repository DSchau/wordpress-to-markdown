import * as Turndown from 'turndown';
import { gfm as githubFlavoredMarkdown } from 'turndown-plugin-gfm';

// Note: MD generated by Turndown might get overwritten by Remark processing later
const service = new Turndown({
  bulletListMarker: '-',
  codeBlockStyle: 'fenced',
  headingStyle: 'atx',
  hr: '___',
});

const escape = str => str.replace(/\\([-_`\[\]])/g, '$1');

service.addRule('old-gh-gist', {
  filter: ['div'],
  replacement(content, node) {
    const replace = node.className === 'gist';
    let result = '\n\n' + content + '\n\n';
    if (replace) {
      const regex = /<a href="([^"]+?)".*?>view raw<\/a>/;
      let matches = ('' + node.outerHTML).match(regex);
      const match = matches[1];
      // console.log('Found "view raw" link:' + match);
      result = '[addjs src="' + match + '"]';
    }
    return result;
  },
});

// TODO: it seems like code blocks may be unescaped improperly
service.addRule('code-fencing', {
  filter: ['pre'],
  replacement(content, node) {
    const lang = node.getAttribute('lang');
    const trimmed = escape(content ? content.trim() : '');
    let result;

    // Surround with single or triple ticks based on if it has a new line in the content or lang attrib
    if (trimmed.match('\n') || lang) {
      result = [
        '',
        '',
        lang === null ? '<!-- TODO: Add language to code block -->' : '',
        '```' + (lang === null ? '' : lang.replace(/‚Äù/g, '')),
        trimmed,
        '```',
        '',
        '',
      ].join('\n');
    } else {
      result = ['`', trimmed, '`'].join('');
    }

    return result;
  },
});

service.use(githubFlavoredMarkdown);

export { service as turndown };
